//============================================================================
// Name        : Lec9.cpp
// Author      : CONG JIANG
// Version     :
// Copyright   : Your copyright notice
// Description : Talyor series numeric; Factorial two ways;
//============================================================================

#include <iostream>
#include <cmath>
#include <cassert>
using namespace std;
#if 0
int fact(int n){ // n*(n-1)*(n-2)...1
	assert(n >=0);   // #define NDEBUG  or  TRY: cout << fact(-3)<< endl;  Assertion failed: (n >=0), function fact, file ../src/Lec9.cpp, line 15.
	int ans =1;
	while(n > 0){
		ans *=n; --n;
	}
	return ans;   // when n=0, return ans=1, since 0!=1.
}
#endif

int fact (int n){
	// if f(0)=1; f(1)=1*f(0); f(2)=2*f(1);
	assert(n >= 0);
	if(n <= 0) return 1;
	return n* fact(n -1);

}
int main() {
	const double Pi = 3.1415926;
	const double x =Pi/3;
	const double ans = cos(x);
	const double Epsilon = 0.000001;


	double taylor = 0;
	int n=0;
#if 0
	while (true){
		taylor += pow(-1,n)/ fact(2*n) * pow(x,2*n);
		cout << n <<"\t\t"<< taylor << endl;
		++n;
		if (fabs(ans- taylor) < Epsilon) break;
	}
#endif
	do {
		taylor += pow(-1,n)/ fact(2*n) * pow(x,2*n);
		cout << n <<"\t\t"<< taylor << endl;
		++n;
	} while (fabs(ans- taylor) >= Epsilon);

	return 0;
}
